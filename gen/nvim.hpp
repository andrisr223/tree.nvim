// Auto generated

#ifndef NEOVIM_CPP__NVIM_HPP
#define NEOVIM_CPP__NVIM_HPP

#include "nvim_rpc.hpp"

namespace nvim {

class Nvim {
public:
    void connect_tcp(const std::string &host,
            const std::string &service, double timeout_sec = 1.0);


    Integer nvim_buf_line_count(Buffer buffer);
    bool nvim_buf_attach(Buffer buffer, bool send_buffer, const Dictionary& opts);
    bool nvim_buf_detach(Buffer buffer);
    std::vector<std::string> nvim_buf_get_lines(Buffer buffer, Integer start, Integer end, bool strict_indexing);
    void nvim_buf_set_lines(Buffer buffer, Integer start, Integer end, bool strict_indexing, const std::vector<std::string>& replacement);
    Integer nvim_buf_get_offset(Buffer buffer, Integer index);
    Object nvim_buf_get_var(Buffer buffer, const std::string& name);
    Integer nvim_buf_get_changedtick(Buffer buffer);
    std::vector<Dictionary> nvim_buf_get_keymap(Buffer buffer, const std::string& mode);
    void nvim_buf_set_keymap(Buffer buffer, const std::string& mode, const std::string& lhs, const std::string& rhs, const Dictionary& opts);
    void nvim_buf_del_keymap(Buffer buffer, const std::string& mode, const std::string& lhs);
    Dictionary nvim_buf_get_commands(Buffer buffer, const Dictionary& opts);
    void nvim_buf_set_var(Buffer buffer, const std::string& name, const Object& value);
    void nvim_buf_del_var(Buffer buffer, const std::string& name);
    Object nvim_buf_get_option(Buffer buffer, const std::string& name);
    void nvim_buf_set_option(Buffer buffer, const std::string& name, const Object& value);
    std::string nvim_buf_get_name(Buffer buffer);
    void nvim_buf_set_name(Buffer buffer, const std::string& name);
    bool nvim_buf_is_loaded(Buffer buffer);
    bool nvim_buf_is_valid(Buffer buffer);
    std::vector<Integer> nvim_buf_get_mark(Buffer buffer, const std::string& name);
    Integer nvim_buf_add_highlight(Buffer buffer, Integer ns_id, const std::string& hl_group, Integer line, Integer col_start, Integer col_end);
    void nvim_buf_clear_namespace(Buffer buffer, Integer ns_id, Integer line_start, Integer line_end);
    void nvim_buf_clear_highlight(Buffer buffer, Integer ns_id, Integer line_start, Integer line_end);
    Integer nvim_buf_set_virtual_text(Buffer buffer, Integer ns_id, Integer line, const Array& chunks, const Dictionary& opts);
    std::vector<Window> nvim_tabpage_list_wins(Tabpage tabpage);
    Object nvim_tabpage_get_var(Tabpage tabpage, const std::string& name);
    void nvim_tabpage_set_var(Tabpage tabpage, const std::string& name, const Object& value);
    void nvim_tabpage_del_var(Tabpage tabpage, const std::string& name);
    Window nvim_tabpage_get_win(Tabpage tabpage);
    Integer nvim_tabpage_get_number(Tabpage tabpage);
    bool nvim_tabpage_is_valid(Tabpage tabpage);
    void nvim_ui_attach(Integer width, Integer height, const Dictionary& options);
    void nvim_ui_detach();
    void nvim_ui_try_resize(Integer width, Integer height);
    void nvim_ui_set_option(const std::string& name, const Object& value);
    void nvim_ui_try_resize_grid(Integer grid, Integer width, Integer height);
    void nvim_ui_pum_set_height(Integer height);
    void nvim_command(const std::string& command);
    Dictionary nvim_get_hl_by_name(const std::string& name, bool rgb);
    Dictionary nvim_get_hl_by_id(Integer hl_id, bool rgb);
    void nvim_feedkeys(const std::string& keys, const std::string& mode, bool escape_csi);
    Integer nvim_input(const std::string& keys);
    void nvim_input_mouse(const std::string& button, const std::string& action, const std::string& modifier, Integer grid, Integer row, Integer col);
    std::string nvim_replace_termcodes(const std::string& str, bool from_part, bool do_lt, bool special);
    std::string nvim_command_output(const std::string& command);
    Object nvim_eval(const std::string& expr);
    Object nvim_execute_lua(const std::string& code, const Array& args);
    Object nvim_call_function(const std::string& fn, const Array& args);
    Object nvim_call_dict_function(const Object& dict, const std::string& fn, const Array& args);
    Integer nvim_strwidth(const std::string& text);
    std::vector<std::string> nvim_list_runtime_paths();
    void nvim_set_current_dir(const std::string& dir);
    std::string nvim_get_current_line();
    void nvim_set_current_line(const std::string& line);
    void nvim_del_current_line();
    Object nvim_get_var(const std::string& name);
    void nvim_set_var(const std::string& name, const Object& value);
    void nvim_del_var(const std::string& name);
    Object nvim_get_vvar(const std::string& name);
    void nvim_set_vvar(const std::string& name, const Object& value);
    Object nvim_get_option(const std::string& name);
    void nvim_set_option(const std::string& name, const Object& value);
    void nvim_out_write(const std::string& str);
    void nvim_err_write(const std::string& str);
    void nvim_err_writeln(const std::string& str);
    std::vector<Buffer> nvim_list_bufs();
    Buffer nvim_get_current_buf();
    void nvim_set_current_buf(Buffer buffer);
    std::vector<Window> nvim_list_wins();
    Window nvim_get_current_win();
    void nvim_set_current_win(Window window);
    Buffer nvim_create_buf(bool listed, bool scratch);
    Window nvim_open_win(Buffer buffer, bool enter, const Dictionary& config);
    std::vector<Tabpage> nvim_list_tabpages();
    Tabpage nvim_get_current_tabpage();
    void nvim_set_current_tabpage(Tabpage tabpage);
    Integer nvim_create_namespace(const std::string& name);
    Dictionary nvim_get_namespaces();
    bool nvim_paste(const std::string& data, bool crlf, Integer phase);
    void nvim_put(const std::vector<std::string>& lines, const std::string& type, bool after, bool follow);
    void nvim_subscribe(const std::string& event);
    void nvim_unsubscribe(const std::string& event);
    Integer nvim_get_color_by_name(const std::string& name);
    Dictionary nvim_get_color_map();
    Dictionary nvim_get_context(const Dictionary& opts);
    Object nvim_load_context(const Dictionary& dict);
    Dictionary nvim_get_mode();
    std::vector<Dictionary> nvim_get_keymap(const std::string& mode);
    void nvim_set_keymap(const std::string& mode, const std::string& lhs, const std::string& rhs, const Dictionary& opts);
    void nvim_del_keymap(const std::string& mode, const std::string& lhs);
    Dictionary nvim_get_commands(const Dictionary& opts);
    Array nvim_get_api_info();
    void nvim_set_client_info(const std::string& name, const Dictionary& version, const std::string& type, const Dictionary& methods, const Dictionary& attributes);
    Dictionary nvim_get_chan_info(Integer chan);
    Array nvim_list_chans();
    Array nvim_call_atomic(const Array& calls);
    Dictionary nvim_parse_expression(const std::string& expr, const std::string& flags, bool highlight);
    Array nvim_list_uis();
    Array nvim_get_proc_children(Integer pid);
    Object nvim_get_proc(Integer pid);
    void nvim_select_popupmenu_item(Integer item, bool insert, bool finish, const Dictionary& opts);
    Buffer nvim_win_get_buf(Window window);
    void nvim_win_set_buf(Window window, Buffer buffer);
    std::vector<Integer> nvim_win_get_cursor(Window window);
    void nvim_win_set_cursor(Window window, const std::vector<Integer>& pos);
    Integer nvim_win_get_height(Window window);
    void nvim_win_set_height(Window window, Integer height);
    Integer nvim_win_get_width(Window window);
    void nvim_win_set_width(Window window, Integer width);
    Object nvim_win_get_var(Window window, const std::string& name);
    void nvim_win_set_var(Window window, const std::string& name, const Object& value);
    void nvim_win_del_var(Window window, const std::string& name);
    Object nvim_win_get_option(Window window, const std::string& name);
    void nvim_win_set_option(Window window, const std::string& name, const Object& value);
    std::vector<Integer> nvim_win_get_position(Window window);
    Tabpage nvim_win_get_tabpage(Window window);
    Integer nvim_win_get_number(Window window);
    bool nvim_win_is_valid(Window window);
    void nvim_win_set_config(Window window, const Dictionary& config);
    Dictionary nvim_win_get_config(Window window);
    void nvim_win_close(Window window, bool force);
    void async_nvim_buf_line_count(Buffer buffer);
    void async_nvim_buf_attach(Buffer buffer, bool send_buffer, const Dictionary& opts);
    void async_nvim_buf_detach(Buffer buffer);
    void async_nvim_buf_get_lines(Buffer buffer, Integer start, Integer end, bool strict_indexing);
    void async_nvim_buf_set_lines(Buffer buffer, Integer start, Integer end, bool strict_indexing, const std::vector<std::string>& replacement);
    void async_nvim_buf_get_offset(Buffer buffer, Integer index);
    void async_nvim_buf_get_var(Buffer buffer, const std::string& name);
    void async_nvim_buf_get_changedtick(Buffer buffer);
    void async_nvim_buf_get_keymap(Buffer buffer, const std::string& mode);
    void async_nvim_buf_set_keymap(Buffer buffer, const std::string& mode, const std::string& lhs, const std::string& rhs, const Dictionary& opts);
    void async_nvim_buf_del_keymap(Buffer buffer, const std::string& mode, const std::string& lhs);
    void async_nvim_buf_get_commands(Buffer buffer, const Dictionary& opts);
    void async_nvim_buf_set_var(Buffer buffer, const std::string& name, const Object& value);
    void async_nvim_buf_del_var(Buffer buffer, const std::string& name);
    void async_nvim_buf_get_option(Buffer buffer, const std::string& name);
    void async_nvim_buf_set_option(Buffer buffer, const std::string& name, const Object& value);
    void async_nvim_buf_get_name(Buffer buffer);
    void async_nvim_buf_set_name(Buffer buffer, const std::string& name);
    void async_nvim_buf_is_loaded(Buffer buffer);
    void async_nvim_buf_is_valid(Buffer buffer);
    void async_nvim_buf_get_mark(Buffer buffer, const std::string& name);
    void async_nvim_buf_add_highlight(Buffer buffer, Integer ns_id, const std::string& hl_group, Integer line, Integer col_start, Integer col_end);
    void async_nvim_buf_clear_namespace(Buffer buffer, Integer ns_id, Integer line_start, Integer line_end);
    void async_nvim_buf_clear_highlight(Buffer buffer, Integer ns_id, Integer line_start, Integer line_end);
    void async_nvim_buf_set_virtual_text(Buffer buffer, Integer ns_id, Integer line, const Array& chunks, const Dictionary& opts);
    void async_nvim_tabpage_list_wins(Tabpage tabpage);
    void async_nvim_tabpage_get_var(Tabpage tabpage, const std::string& name);
    void async_nvim_tabpage_set_var(Tabpage tabpage, const std::string& name, const Object& value);
    void async_nvim_tabpage_del_var(Tabpage tabpage, const std::string& name);
    void async_nvim_tabpage_get_win(Tabpage tabpage);
    void async_nvim_tabpage_get_number(Tabpage tabpage);
    void async_nvim_tabpage_is_valid(Tabpage tabpage);
    void async_nvim_ui_attach(Integer width, Integer height, const Dictionary& options);
    void async_nvim_ui_detach();
    void async_nvim_ui_try_resize(Integer width, Integer height);
    void async_nvim_ui_set_option(const std::string& name, const Object& value);
    void async_nvim_ui_try_resize_grid(Integer grid, Integer width, Integer height);
    void async_nvim_ui_pum_set_height(Integer height);
    void async_nvim_command(const std::string& command);
    void async_nvim_get_hl_by_name(const std::string& name, bool rgb);
    void async_nvim_get_hl_by_id(Integer hl_id, bool rgb);
    void async_nvim_feedkeys(const std::string& keys, const std::string& mode, bool escape_csi);
    void async_nvim_input(const std::string& keys);
    void async_nvim_input_mouse(const std::string& button, const std::string& action, const std::string& modifier, Integer grid, Integer row, Integer col);
    void async_nvim_replace_termcodes(const std::string& str, bool from_part, bool do_lt, bool special);
    void async_nvim_command_output(const std::string& command);
    void async_nvim_eval(const std::string& expr);
    void async_nvim_execute_lua(const std::string& code, const Array& args);
    void async_nvim_call_function(const std::string& fn, const Array& args);
    void async_nvim_call_dict_function(const Object& dict, const std::string& fn, const Array& args);
    void async_nvim_strwidth(const std::string& text);
    void async_nvim_list_runtime_paths();
    void async_nvim_set_current_dir(const std::string& dir);
    void async_nvim_get_current_line();
    void async_nvim_set_current_line(const std::string& line);
    void async_nvim_del_current_line();
    void async_nvim_get_var(const std::string& name);
    void async_nvim_set_var(const std::string& name, const Object& value);
    void async_nvim_del_var(const std::string& name);
    void async_nvim_get_vvar(const std::string& name);
    void async_nvim_set_vvar(const std::string& name, const Object& value);
    void async_nvim_get_option(const std::string& name);
    void async_nvim_set_option(const std::string& name, const Object& value);
    void async_nvim_out_write(const std::string& str);
    void async_nvim_err_write(const std::string& str);
    void async_nvim_err_writeln(const std::string& str);
    void async_nvim_list_bufs();
    void async_nvim_get_current_buf();
    void async_nvim_set_current_buf(Buffer buffer);
    void async_nvim_list_wins();
    void async_nvim_get_current_win();
    void async_nvim_set_current_win(Window window);
    void async_nvim_create_buf(bool listed, bool scratch);
    void async_nvim_open_win(Buffer buffer, bool enter, const Dictionary& config);
    void async_nvim_list_tabpages();
    void async_nvim_get_current_tabpage();
    void async_nvim_set_current_tabpage(Tabpage tabpage);
    void async_nvim_create_namespace(const std::string& name);
    void async_nvim_get_namespaces();
    void async_nvim_paste(const std::string& data, bool crlf, Integer phase);
    void async_nvim_put(const std::vector<std::string>& lines, const std::string& type, bool after, bool follow);
    void async_nvim_subscribe(const std::string& event);
    void async_nvim_unsubscribe(const std::string& event);
    void async_nvim_get_color_by_name(const std::string& name);
    void async_nvim_get_color_map();
    void async_nvim_get_context(const Dictionary& opts);
    void async_nvim_load_context(const Dictionary& dict);
    void async_nvim_get_mode();
    void async_nvim_get_keymap(const std::string& mode);
    void async_nvim_set_keymap(const std::string& mode, const std::string& lhs, const std::string& rhs, const Dictionary& opts);
    void async_nvim_del_keymap(const std::string& mode, const std::string& lhs);
    void async_nvim_get_commands(const Dictionary& opts);
    void async_nvim_get_api_info();
    void async_nvim_set_client_info(const std::string& name, const Dictionary& version, const std::string& type, const Dictionary& methods, const Dictionary& attributes);
    void async_nvim_get_chan_info(Integer chan);
    void async_nvim_list_chans();
    void async_nvim_call_atomic(const Array& calls);
    void async_nvim_parse_expression(const std::string& expr, const std::string& flags, bool highlight);
    void async_nvim_list_uis();
    void async_nvim_get_proc_children(Integer pid);
    void async_nvim_get_proc(Integer pid);
    void async_nvim_select_popupmenu_item(Integer item, bool insert, bool finish, const Dictionary& opts);
    void async_nvim_win_get_buf(Window window);
    void async_nvim_win_set_buf(Window window, Buffer buffer);
    void async_nvim_win_get_cursor(Window window);
    void async_nvim_win_set_cursor(Window window, const std::vector<Integer>& pos);
    void async_nvim_win_get_height(Window window);
    void async_nvim_win_set_height(Window window, Integer height);
    void async_nvim_win_get_width(Window window);
    void async_nvim_win_set_width(Window window, Integer width);
    void async_nvim_win_get_var(Window window, const std::string& name);
    void async_nvim_win_set_var(Window window, const std::string& name, const Object& value);
    void async_nvim_win_del_var(Window window, const std::string& name);
    void async_nvim_win_get_option(Window window, const std::string& name);
    void async_nvim_win_set_option(Window window, const std::string& name, const Object& value);
    void async_nvim_win_get_position(Window window);
    void async_nvim_win_get_tabpage(Window window);
    void async_nvim_win_get_number(Window window);
    void async_nvim_win_is_valid(Window window);
    void async_nvim_win_set_config(Window window, const Dictionary& config);
    void async_nvim_win_get_config(Window window);
    void async_nvim_win_close(Window window, bool force);

public:
    NvimRPC client_;

};

} //namespace nvim

#endif //NEOVIM_CPP__NVIM_HPP
